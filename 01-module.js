/**
 * 1. 模块：表示一个已经被浏览器编译为可执行机器码的WebAssembly二进制代码。一个模块是无状态的，并且像一个二进制大对象一样在Window和Worker之间共享。一个模块能够像一个ES的模块一样声明导入和导出。
 * 2. 内存： 一个可变长的ArrayBuffer。本质上是连续的字节数组，WebAssembly的低级内存存取指令可以对它进行读写操作。
 * 3. 表格： 一个可变长的类型化数组。不及格中的项存储了不能作为原始字节存储在内存里的对象的引用（为了安全和可移植性的原因）。
 * 4. 实例： 一个模块及其在运行时使用的所有状态，包括内存、表格和一系列导入值。一个实例就像一个已经被加载到一个拥有一组特定导入的特定的全局变量的ES模块。
 */

/**
 * 1. wasm有一个基于S-表达式的文本形式，设计为在文本编辑器，浏览器开发工具等中暴露的一个中间形式。
 * 2. 文本格式通常被保存为.wat扩展名；有时.wast也被使用，它是说文件包含了额外的测试命令（断言等）并且它们不需要转换到.wasm中。
 * 3. S-表达式是一个非常古老和非常简单的用来表示树的文本格式。因此，我们可以把一个模块想象为一棵由描述了模块结构和代码的节点组成的树。不过，与一门编程语言的抽象语法树不同的是，WASM的树是相当平的，也就是大部分包含了指令列表。
 * 4. 树上的每个一个节点都有一对括号()包围，括号内的第一个标签告诉你该节点的类型，其后跟随的是由空格分隔的属性或孩子节点列表。
 * 5. S-表达式如下：(module (memory 1) (func))。
 *  这条表达式，表示一顶根节点为模块(module)的树，该树有两个孩子节点，分别是（memory 1)节点与(func)节点。
 */

